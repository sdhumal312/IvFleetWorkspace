package org.fleetopgroup.controller;

import java.util.HashMap;

import org.fleetopgroup.persistence.dto.CustomUserDetails;
import org.fleetopgroup.persistence.serviceImpl.IPickAndDropLocationService;
import org.fleetopgroup.persistence.serviceImpl.ITicketIncomeApiService;
import org.fleetopgroup.persistence.serviceImpl.ITripSheetService;
import org.fleetopgroup.web.util.DateTimeUtility;
import org.fleetopgroup.web.util.ValueObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TripSheetRestController {

	@Autowired	ITicketIncomeApiService			ticketIncomeApiService;
	@Autowired	IPickAndDropLocationService		PickAndDropLocationService;
	@Autowired	private ITripSheetService		tripSheetService;
	
	@RequestMapping(value="/addMantisTripSheetIncome", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  addMantisTripSheetIncome(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		ValueObject 		object 					= null;
		ValueObject 		outobject 				= null;
		try {
			object 				= new ValueObject(allRequestParams);
			outobject	=  ticketIncomeApiService.getVehicleTicketIncome(object);
			
			return outobject.getHtData();
		} catch (Exception e) {
			throw e;
		} finally {
			object 					= null;
			outobject 				= null;
		}
	}
	
	@RequestMapping(value="/savePickOrDropDispatchMobileData", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  savePickOrDropDispatchMobileData(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		ValueObject 		object 					= null;
		ValueObject 		outobject 				= null;
		try {
			object 				= new ValueObject(allRequestParams);
			outobject	=  PickAndDropLocationService.savePickOrDropDispatchMobileData(object);
			
			return outobject.getHtData();
		} catch (Exception e) {
			throw e;
		} finally {
			object 					= null;
			outobject 				= null;
		}
	}
	
	@RequestMapping(value="/getPickOrDropDispatchMobileData", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  getPickOrDropDispatchMobileData(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		ValueObject 					object 					= null;
		ValueObject 					outobject 				= null;
		int								companyId				= 0;
		long							userId					= 0;
		CustomUserDetails				userDetails				= null;
		try {
			object 				= new ValueObject(allRequestParams);
			companyId    		= object.getInt("companyId");
			userId				= object.getLong("userId");
			userDetails			= new CustomUserDetails(companyId, userId);
			
			object.put("userDetails", userDetails);
			outobject	=  PickAndDropLocationService.getTripsheetPickDropDispatchDetails(object);
			
			return outobject.getHtData();
		} catch (Exception e) {
			throw e;
		} finally {
			object 					= null;
			outobject 				= null;
		}
	}
	
	@RequestMapping(value="/editTripsheetPickDropDispatchDetailsFromMobile", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  editTripsheetPickDropDispatchDetailsFromMobile(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		ValueObject 					object 					= null;
		ValueObject 					outobject 				= null;
		int								companyId				= 0;
		long							userId					= 0;
		CustomUserDetails				userDetails				= null;
		try {
			object 				= new ValueObject(allRequestParams);
			companyId    		= object.getInt("companyId");
			userId				= object.getLong("userId");
			userDetails			= new CustomUserDetails(companyId, userId);
			
			object.put("userDetails", userDetails);
			outobject	=  PickAndDropLocationService.editTripsheetPickDropDispatchDetailsFromMobile(object);
			
			return outobject.getHtData();
		} catch (Exception e) {
			throw e;
		} finally {
			object 					= null;
			outobject 				= null;
		}
	}
	
	@RequestMapping(value="/updateTripsheetPickDropDispatchDetailsFromMobile", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  updateTripsheetPickDropDispatchDetailsFromMobile(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		ValueObject 					object 					= null;
		ValueObject 					outobject 				= null;
		int								companyId				= 0;
		long							userId					= 0;
		CustomUserDetails				userDetails				= null;
		try {
			object 				= new ValueObject(allRequestParams);
			companyId    		= object.getInt("companyId");
			userId				= object.getLong("userId");
			userDetails			= new CustomUserDetails(companyId, userId);
			
			object.put("userDetails", userDetails);
			outobject	=  PickAndDropLocationService.updateTripsheetPickDropDispatchDetailsFromMobile(object);
			
			return outobject.getHtData();
		} catch (Exception e) {
			throw e;
		} finally {
			object 					= null;
			outobject 				= null;
		}
	}
	
	@RequestMapping(value="/searchPickOrDropTripsheetFromMobile", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  searchPickOrDropTripsheetFromMobile(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		ValueObject 					object 					= null;
		ValueObject 					outobject 				= null;
		int								companyId				= 0;
		long							userId					= 0;
		CustomUserDetails				userDetails				= null;
		try {
			object 				= new ValueObject(allRequestParams);
			companyId    		= object.getInt("companyId");
			userId				= object.getLong("userId");
			userDetails			= new CustomUserDetails(companyId, userId);
			
			object.put("userDetails", userDetails);
			outobject	=  PickAndDropLocationService.searchTripsheetNumber(object);
			
			return outobject.getHtData();
		} catch (Exception e) {
			throw e;
		} finally {
			object 					= null;
			outobject 				= null;
		}
	}
	
	@RequestMapping(value="/searchPickAndDropTripByVehicle", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  searchPickAndDropTripByVehicle(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		ValueObject 		object 					= null;
		ValueObject 		outobject 				= null;
		try {
			object 		= new ValueObject(allRequestParams);
			outobject	=  PickAndDropLocationService.searchPickAndDropTripByVehicle(object);
			
			return outobject.getHtData();
		} catch (Exception e) {
			throw e;
		} finally {
			object 					= null;
			outobject 				= null;
		}
	}
	
	@RequestMapping(value="/getTripSheetDetailsByVehicleNumber", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  getTripSheetDetailsByVehicleNumber(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{

		ValueObject 		object 					= null;
		try {
			
			object 				= new ValueObject(allRequestParams);
			String vehicleNumber = object.getString("vehicleNumber");
			
			String date=null;
			if(object.getString("date")!=null && !object.getString("date").isEmpty())
			{
			   date = DateTimeUtility.getSqlStrDateFromStrDate(object.getString("date"), DateTimeUtility.YYYY_MM_DD_HH_MM_SS);	
			    object =  tripSheetService.getTripSheetDetailsByVehicleNoAndTripOpenCloseDate(vehicleNumber, date);
			    if(object.containsKey("tripsheet"))
			    	return tripSheetService.getTripSheetDetailsByVehicleNoAndTripOpenCloseDate(vehicleNumber, date).getHtData();
			    else
			    	return  tripSheetService.getTripSheetDetailsByNumber(new ValueObject(allRequestParams).getString("vehicleNumber")).getHtData();
			}
			else
			{
				return  tripSheetService.getTripSheetDetailsByNumber(new ValueObject(allRequestParams).getString("vehicleNumber")).getHtData();
			}
			
		} catch (Exception e) {
			throw e;
		} 
	}
	
	@RequestMapping(value="/testing", produces="application/json", method=RequestMethod.POST)
	public HashMap<Object, Object>  testingMethode(@RequestParam HashMap<Object, Object> allRequestParams) throws Exception{
		try {
			System.err.println("  allRequestParams  *** "+allRequestParams);
			return allRequestParams;
		} catch (Exception e) {
			throw e;
		} 
	}
}
